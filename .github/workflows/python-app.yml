# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Azure AI Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    #- name: Set up Chrome browser (latest)
    #  uses: browser-actions/setup-chrome@latest
    #- name: Chrome browser (latest)
    #  run: |
    #    chrome --version
    
    - name: Install requirements
      run: |
        pip install -r requirements.txt
        
    - name: Test with pytest
      run: |
        pytest

    # Add Azure Container Registry (ACR) to the workflow

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to ACR
      run: |
        az acr login --name ${{ secrets.ACR_NAME }}

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/ai-python-app:v1 .

    - name: Push Docker image
      run: |
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/ai-python-app:v1

    - name: Deploy to Azure Container Instances
      run: |
        az container create --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ai-python-app \
          --image ${{ secrets.ACR_NAME }}.azurecr.io/ai-python-app:v1 \
          --cpu 1 \
          --memory 1 \
          --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --ip-address Public \
          --dns-name-label aidemo \
          --ports 80
